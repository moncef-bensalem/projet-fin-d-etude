generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Banner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String
  description String?
  link        String?
  isActive    Boolean  @default(true)
  storeId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  store       Store    @relation(fields: [storeId], references: [id])
}

model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  userId Json?  @unique
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @db.Date
  description String
  /// Could not determine type: the field only had null or empty values in the sample set.
  image       Json?
  name        String
  storeId     String   @db.ObjectId
  updatedAt   DateTime @db.Date
  
  products    Product[]
  store       Store    @relation(fields: [storeId], references: [id])

  @@unique([name, storeId])
}

model Coupon {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  CouponCode Json?  @unique
}

model OpeningHours {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  closeTime String
  createdAt DateTime @db.Date
  day       String
  isClosed  Boolean
  openTime  String
  storeId   String   @db.ObjectId
  updatedAt DateTime @db.Date
  
  store     Store    @relation(fields: [storeId], references: [id])
}

model Order {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @db.Date
  customerId      String   @db.ObjectId
  number          String   @unique
  shippingAddress String
  status          String
  paymentStatus   String   @default("PENDING")
  storeId         String   @db.ObjectId
  total           Float
  updatedAt       DateTime @db.Date
  promotionId     String?  @db.ObjectId
  isRated         Boolean  @default(false)
  
  items           OrderItem[]
  promotion       Promotion? @relation(fields: [promotionId], references: [id])
  customer        User      @relation("CustomerOrders", fields: [customerId], references: [id])
  rating          OrderRating?
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  orderId   String   @db.ObjectId
  price     Float
  productId String   @db.ObjectId
  quantity  BigInt
  updatedAt DateTime @db.Date
  
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model PaymentMethod {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  accountName   String
  accountNumber String
  createdAt     DateTime @db.Date
  isDefault     Boolean
  type          String
  updatedAt     DateTime @db.Date
  userId        String   @db.ObjectId
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String   @db.ObjectId
  createdAt   DateTime @db.Date
  description String
  images      String[]
  name        String
  price       Float
  rating      Float
  stock       BigInt
  storeId     String   @db.ObjectId
  updatedAt   DateTime @db.Date
  
  category    Category @relation(fields: [categoryId], references: [id])
  produitAssociations ProduitBesoin[]
  store       Store    @relation(fields: [storeId], references: [id])
  orderItems  OrderItem[]
}

model Promotion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  createdAt   DateTime @db.Date
  description String
  endDate     DateTime @db.Date
  isActive    Boolean
  maxUses     BigInt?
  minPurchase Float?
  storeId     String   @db.ObjectId
  startDate   DateTime @db.Date
  type        String
  updatedAt   DateTime @db.Date
  value       Float
  
  orders      Order[]
  store       Store    @relation(fields: [storeId], references: [id])

  @@unique([code, storeId])
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  address     String
  banner      String
  createdAt   DateTime @db.Date
  description String
  email       String
  facebook    String
  instagram   String
  isApproved  Boolean
  logo        String
  name        String
  ownerId     String   @unique @db.ObjectId
  phone       String
  rating      Float
  updatedAt   DateTime @db.Date
  website     String
  
  products    Product[]
  categories  Category[]
  banners     Banner[]
  openingHours OpeningHours[]
  promotions  Promotion[]
  owner       User      @relation(fields: [ownerId], references: [id])
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // 'FREE', 'MONTHLY', 'ANNUAL'
  amount    Float    // Montant payé
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime
  status    String   // 'ACTIVE', 'EXPIRED', 'CANCELLED'
  paymentId String?  // Identifiant de paiement externe (si applicable)
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  type        String   // 'SUBSCRIPTION', 'ORDER', 'WITHDRAWAL', 'REFUND'
  status      String   // 'PENDING', 'COMPLETED', 'FAILED', 'CANCELLED'
  description String?
  senderId    String   @db.ObjectId
  receiverId  String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  currency    String   @default("DT")
  reference   String?  // Référence de la transaction (ex: ORD-123456)
  paymentMethod String? // Méthode de paiement utilisée

  sender      User     @relation("SentTransactions", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedTransactions", fields: [receiverId], references: [id])
}

model Wallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  balance   Float    @default(0)
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime  @default(now()) @db.Date
  email             String    @unique
  emailVerified     DateTime? @db.Date
  name              String
  password          String?
  phone             String?
  role              String    @default("CUSTOMER")
  updatedAt         DateTime  @updatedAt @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  verificationToken Json?
  image             String?
  preferences       Json?     // Stockage des préférences utilisateur
  
  accounts          Account[]
  sessions          Session[]
  store             Store?
  orders            Order[]   @relation("CustomerOrders")
  sentTransactions  Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
  wallet            Wallet?
  produitAssociations ProduitBesoin[]
  orderRatings      OrderRating[]
  customerTickets   SupportTicket[] @relation("CustomerTickets")
  assignedTickets   SupportTicket[] @relation("AssignedTickets")
  ticketMessages    TicketMessage[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ListeScolaire {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  titre       String
  description String?
  classe      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  statut      String   @default("EN_ATTENTE")  // "EN_ATTENTE", "PUBLIEE", "ARCHIVEE" 
  createdById String   @db.ObjectId
  
  besoins     Besoin[]
}

model Besoin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nomProduit  String
  quantite    Int
  details     String?
  statut      String   @default("NON_COUVERT")  // "NON_COUVERT", "PARTIELLEMENT_COUVERT", "COUVERT"
  listeId     String   @db.ObjectId
  
  liste       ListeScolaire @relation(fields: [listeId], references: [id], onDelete: Cascade)
  produitAssociations ProduitBesoin[]
}

model ProduitBesoin {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  besoinId           String   @db.ObjectId
  produitId          String   @db.ObjectId
  sellerId           String   @db.ObjectId
  prix               Float
  quantiteDisponible Int
  validated          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  besoin             Besoin   @relation(fields: [besoinId], references: [id], onDelete: Cascade)
  produit            Product  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  seller             User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  @@unique([besoinId, produitId, sellerId])
}

model OrderRating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @unique @db.ObjectId
  userId    String   @db.ObjectId
  rating    Int      // Note de 1 à 5
  comment   String?  // Commentaire optionnel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subject     String
  description String
  status      String   // "OPEN", "PENDING", "RESOLVED", "CLOSED"
  priority    String   // "LOW", "MEDIUM", "HIGH", "URGENT"
  category    String   // "PAYMENT", "SHIPPING", "PRODUCT", "ACCOUNT", "OTHER"
  customerId  String   @db.ObjectId
  assignedToId String? @db.ObjectId
  orderNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  customer    User     @relation("CustomerTickets", fields: [customerId], references: [id])
  assignedTo  User?    @relation("AssignedTickets", fields: [assignedToId], references: [id])
  messages    TicketMessage[]
}

model TicketMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  ticketId  String   @db.ObjectId
  senderId  String   @db.ObjectId
  createdAt DateTime @default(now())
  attachments String[] // URLs des pièces jointes
  
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id])
}
